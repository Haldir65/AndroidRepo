plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    alias(libs.plugins.compose.compiler)
//    id 'com.github.dcendents.android-maven'
}

//apply plugin: 'com.neenbedankt.android-apt'
apply from: "${project.rootDir}/config.gradle"
android {
    compileSdk =  35

    namespace 'com.me.harris.androidanimations'
    
    java {
        toolchain.languageVersion.set(JavaLanguageVersion.of(21))
    }

    buildToolsVersion = '35.0.0'

    buildFeatures {
        viewBinding =  true
        buildConfig true
        aidl true
        compose = true
    }


    defaultConfig {
        applicationId "com.me.harris.androidanimations"
        minSdkVersion 27
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        renderscriptTargetApi 21
        renderscriptSupportModeEnabled true
    }
//    sourceSets {
//        main {
//            if (project.ext.splitSrc){
//                manifest.srcFile 'src/debug/AndroidManifest.xml'
//                java.srcDirs = ['src/debug/java']
//                res.srcDirs = ['src/debug/res'] // 因为使用了databinding,main/res文件夹中的layout包含了main/java/中的一些java类，所以这里如果要加上main的话，还需要把java的srcDir加上main
//                aidl.srcDirs = ['src/debug/aidl']
//            }else {
//				manifest.srcFile  'src/main/AndroidManifest.xml'
//                java.srcDirs = ['src/main/java']
//				java {
//					//排除java/debug文件夹下的所有文件
//					exclude 'src/debug/**'
//				}
//				res.srcDirs = ['src/main/res']
////                resources.srcDirs = ['src']
////                aidl.srcDirs = ['src']
////                renderscript.srcDirs = ['src']
////                res.srcDirs = ['res']
////                assets.srcDirs = ['assets']
////                jniLibs.srcDirs = ['libs']
//			}
//        }
//    }


    // Specifies the flavor dimensions you want to use. The order in which you
    // list each dimension determines its priority, from highest to lowest,
    // when Gradle merges variant sources and configurations. You must assign
    // each product flavor you configure to one of the flavor dimensions.
    flavorDimensions "api", "mode"


//    productFlavors {
//        demo {
//            // Assigns this product flavor to the "mode" flavor dimension.
//            dimension "mode"
//
//        }
//
//        full {
//            dimension "mode"
//
//        }
//
//        // Configurations in the "api" product flavors override those in "mode"
//        // flavors and the defaultConfig block. Gradle determines the priority
//        // between flavor dimensions based on the order in which they appear next
//        // to the flavorDimensions property above--the first dimension has a higher
//        // priority than the second, and so on.
//        minApi24 {
//            dimension "api"
//            // To ensure the target device receives the version of the app with
//            // the highest compatible API level, assign version codes in increasing
//            // value with API level. To learn more about assigning version codes to
//            // support app updates and uploading to Google Play, read Multiple APK Support
//            versionCode 30000 + android.defaultConfig.versionCode
//            versionNameSuffix "-minApi24"
//
//        }
//
//        minApi23 {
//            dimension "api"
//            versionCode 20000  + android.defaultConfig.versionCode
//            versionNameSuffix "-minApi23"
//        }
//
//        minApi21 {
//            dimension "api"
//            versionCode 10000  + android.defaultConfig.versionCode
//            versionNameSuffix "-minApi21"
//        }
//    }


    signingConfigs {
        release {
            keyAlias 'key0'
            keyPassword 'dummytext'
            storeFile file('./key/samplekey.jks')
            storePassword 'dummytext'
        }
    }



    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
    }

//    dexOptions {
////        javaMaxHeapSize "6g"# just delete this line , according to the google io 2017 talk
//    }

    buildTypes {

        debug {
            minifyEnabled false
            buildConfigField "Boolean", "DEBUG_MODE", "true"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            buildConfigField "Boolean", "DEBUG_MODE", "false"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_21
        sourceCompatibility JavaVersion.VERSION_21
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

//    applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            def file = output.outputFile
//            def apkName = 'xxx-xxx-xxx-signed.apk'
//            output.outputFile = new File(file.parent, apkName)
//        }
//    }


    applicationVariants.all { variant ->
        variant.outputs.all {
            def apkName = 'mySigned.apk'
            print(apkName)
            outputFileName = "${variant.name}-${variant.versionName}.apk"
        }
    }
}





dependencies {
    implementation libs.androidx.cardview.cardview
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation libs.androidx.appcompat.appcompat
    implementation libs.androidx.core.core.ktx
    implementation libs.google.android.material.material
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.lifecycle.extensions
    implementation libs.androidx.swiperefreshlayout
// https://mvnrepository.com/artifact/androidx.asynclayoutinflater/asynclayoutinflater
    implementation libs.androidx.asynclayoutinflater
    implementation(libs.androidx.activity)
    implementation libs.androidx.activity.ktx
    implementation libs.androidx.fragment.ktx
    // ViewModelScope
    implementation libs.androidx.lifecycle.lifecycle.viewmodel.ktx
    // LifecycleScope
    implementation libs.androidx.lifecycle.lifecycle.runtime.ktx
    // LiveData
    implementation libs.androidx.lifecycle.lifecycle.livedata.ktx
    // Annotation processor
//    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation libs.androidx.lifecycle.common.java8

    // optional - helpers for implementing LifecycleOwner in a Service
    implementation libs.androidx.lifecycle.service

    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation libs.androidx.lifecycle.process

    // optional - ReactiveStreams support for LiveData
    implementation libs.androidx.lifecycle.reactivestreams

    // optional - Test helpers for LiveData
    testImplementation libs.androidx.core.testing

    implementation libs.androidx.recyclerview.recyclerview
    testImplementation libs.junit.junit
    androidTestImplementation libs.androidx.test.junit
    androidTestImplementation libs.androidx.test.espresso.espresso.core
    implementation libs.eventbus


    //ViewModel and LiveData
    implementation libs.androidx.lifecycle.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.lifecycle.livedata.ktx
    kapt(libs.androidx.lifecycle.common.java8)

    //Coroutines
    implementation libs.coroutines.core
    implementation libs.coroutines.android

    //Image Loading
    implementation(libs.coil.v240)

    //Webservices
    implementation libs.okhttp
    implementation libs.retrofit
    implementation libs.converter.gson
    implementation libs.adapter.rxjava2

    // https://mvnrepository.com/artifact/io.reactivex.rxjava3/rxandroid
    implementation libs.rxandroid3
    // https://mvnrepository.com/artifact/io.reactivex.rxjava3/rxjava
    implementation libs.rxjava3


    // https://mvnrepository.com/artifact/com.jdappel/android-gradle-aspectj
//    implementation 'com.jdappel:android-gradle-aspectj:3.4.0'
// https://mvnrepository.com/artifact/org.aspectj/aspectjtools
    implementation libs.aspectjtools

    // https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-reflect
    implementation libs.kotlin.reflect

    implementation libs.glide
    implementation libs.okhttp3.integration
    implementation libs.okhttp
    implementation libs.rxjava2.rxjava
    implementation libs.rxjava2.rxandroid
    testImplementation libs.junit.junit
    implementation libs.ultra.ptr
    //添加下拉刷新组件
//    if (true) {
//
//    }
    implementation project(':annotation')
    kapt project(":compiler")
    implementation libs.kotlin.stdlib
    implementation project(':pluginlib')

    implementation project(':otherprojects:datastore')

    implementation libs.androidx.datastore.preference

    implementation(platform(libs.androidx.compose.bom))
    implementation libs.androidx.compiler
    implementation("androidx.activity:activity-compose")
    implementation("androidx.compose.animation:animation")

    // optional - RxJava2 support
//    implementation libs.androidx.datastore.preferences.rxjava2
//
//    // optional - RxJava3 support
//    implementation libs.androidx.datastore.preferences.rxjava3
}

