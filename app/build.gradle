plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
//    id 'com.github.dcendents.android-maven'
}

//apply plugin: 'com.neenbedankt.android-apt'
apply from: "${project.rootDir}/config.gradle"
android {
    compileSdkVersion 31
    buildToolsVersion '31.0.0'

    viewBinding { enabled = true }
    defaultConfig {
        applicationId "com.me.harris.androidanimations"
        minSdkVersion project.ext.ANDROID_BUILD_MIN_SDK_VERSION
        targetSdkVersion project.ext.ANDROID_BUILD_TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        renderscriptTargetApi 21
        renderscriptSupportModeEnabled true
    }
//    sourceSets {
//        main {
//            if (project.ext.splitSrc){
//                manifest.srcFile 'src/debug/AndroidManifest.xml'
//                java.srcDirs = ['src/debug/java']
//                res.srcDirs = ['src/debug/res'] // 因为使用了databinding,main/res文件夹中的layout包含了main/java/中的一些java类，所以这里如果要加上main的话，还需要把java的srcDir加上main
//                aidl.srcDirs = ['src/debug/aidl']
//            }else {
//				manifest.srcFile  'src/main/AndroidManifest.xml'
//                java.srcDirs = ['src/main/java']
//				java {
//					//排除java/debug文件夹下的所有文件
//					exclude 'src/debug/**'
//				}
//				res.srcDirs = ['src/main/res']
////                resources.srcDirs = ['src']
////                aidl.srcDirs = ['src']
////                renderscript.srcDirs = ['src']
////                res.srcDirs = ['res']
////                assets.srcDirs = ['assets']
////                jniLibs.srcDirs = ['libs']
//			}
//        }
//    }


    // Specifies the flavor dimensions you want to use. The order in which you
    // list each dimension determines its priority, from highest to lowest,
    // when Gradle merges variant sources and configurations. You must assign
    // each product flavor you configure to one of the flavor dimensions.
    flavorDimensions "api", "mode"


//    productFlavors {
//        demo {
//            // Assigns this product flavor to the "mode" flavor dimension.
//            dimension "mode"
//
//        }
//
//        full {
//            dimension "mode"
//
//        }
//
//        // Configurations in the "api" product flavors override those in "mode"
//        // flavors and the defaultConfig block. Gradle determines the priority
//        // between flavor dimensions based on the order in which they appear next
//        // to the flavorDimensions property above--the first dimension has a higher
//        // priority than the second, and so on.
//        minApi24 {
//            dimension "api"
//            minSdkVersion 24
//            // To ensure the target device receives the version of the app with
//            // the highest compatible API level, assign version codes in increasing
//            // value with API level. To learn more about assigning version codes to
//            // support app updates and uploading to Google Play, read Multiple APK Support
//            versionCode 30000 + android.defaultConfig.versionCode
//            versionNameSuffix "-minApi24"
//
//        }
//
//        minApi23 {
//            dimension "api"
//            minSdkVersion 23
//            versionCode 20000  + android.defaultConfig.versionCode
//            versionNameSuffix "-minApi23"
//        }
//
//        minApi21 {
//            dimension "api"
//            minSdkVersion 21
//            versionCode 10000  + android.defaultConfig.versionCode
//            versionNameSuffix "-minApi21"
//        }
//    }


    signingConfigs {
        release {
            keyAlias 'key0'
            keyPassword 'dummytext'
            storeFile file('./key/samplekey.jks')
            storePassword 'dummytext'
        }
    }



    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
    }

    dexOptions {
//        javaMaxHeapSize "6g"# just delete this line , according to the google io 2017 talk
    }

    buildTypes {

        debug {
            minifyEnabled false
            buildConfigField "Boolean", "DEBUG_MODE", "true"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            buildConfigField "Boolean", "DEBUG_MODE", "false"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

//    applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            def file = output.outputFile
//            def apkName = 'xxx-xxx-xxx-signed.apk'
//            output.outputFile = new File(file.parent, apkName)
//        }
//    }


    applicationVariants.all { variant ->
        variant.outputs.all {
            def apkName = 'mySigned.apk'
            print(apkName)
            outputFileName = "${variant.name}-${variant.versionName}.apk"
        }
    }
}





dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
// https://mvnrepository.com/artifact/androidx.asynclayoutinflater/asynclayoutinflater
    implementation "androidx.asynclayoutinflater:asynclayoutinflater:1.0.0"
    def activity_version = "1.4.0"
    implementation("androidx.activity:activity:$activity_version")
    implementation 'androidx.activity:activity-ktx:1.4.0'
    implementation 'androidx.fragment:fragment-ktx:1.4.1'
    def lifecycle_version = "2.4.1"
    def arch_version = "2.1.0"
    // ViewModelScope
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'
    // LifecycleScope
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    // LiveData
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
    // Annotation processor
//    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // optional - helpers for implementing LifecycleOwner in a Service
    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"

    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"

    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$arch_version"

    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation 'org.greenrobot:eventbus:3.2.0'


    //ViewModel and LiveData
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
    kapt("androidx.lifecycle:lifecycle-common-java8:2.4.0")

    //Coroutines
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2")
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2'

    //Image Loading
    implementation("io.coil-kt:coil:0.8.0")

    //Webservices
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.14.9'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.9.0'

    // https://mvnrepository.com/artifact/io.reactivex.rxjava3/rxandroid
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    // https://mvnrepository.com/artifact/io.reactivex.rxjava3/rxjava
    implementation 'io.reactivex.rxjava3:rxjava:3.1.1'


    // https://mvnrepository.com/artifact/com.jdappel/android-gradle-aspectj
//    implementation 'com.jdappel:android-gradle-aspectj:3.4.0'
// https://mvnrepository.com/artifact/org.aspectj/aspectjtools
    implementation 'org.aspectj:aspectjtools:1.6.2'

    // https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-reflect
    implementation"org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}"

    implementation 'com.github.bumptech.glide:glide:4.11.0'
    implementation 'com.github.bumptech.glide:okhttp3-integration:4.7.1@aar'
    implementation 'com.squareup.okhttp3:okhttp:3.14.9'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.8'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    testImplementation 'junit:junit:4.13.2'
    implementation 'in.srain.cube:ultra-ptr:1.0.11'
    //添加下拉刷新组件
//    if (true) {
//
//    }
    implementation project(':annotation')
    kapt project(":compiler")
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation project(':pluginlib')
}

